---
image: alpine:latest

variables:
  IMAGE_SLUG: home-panel
  DOCKER_DRIVER: overlay2
  DOCKER_HUB_USER: timmo001

stages:
  - preflight
  # - pages
  - build
  - test
  - deploy

before_script:
  - mv config.template.json config.json

# Generic DIND template
.dind: &dind
  before_script:
    - docker info
  services:
    - name: docker:dind
      command: ["--experimental"]

# Generic preflight template
.preflight: &preflight
  stage: preflight
  tags:
    - preflight

# Preflight jobs
hadolint:
  <<: *preflight
  image: hadolint/hadolint:v1.6.6
  before_script:
    - hadolint --version
  script:
    - hadolint "Dockerfile"

shellcheck:
  <<: *preflight
  image:
    name: koalaman/shellcheck-alpine:stable
    entrypoint: [""]
  before_script:
    - shellcheck --version
    - apk --no-cache add grep
    - |
      find . -type f -print0 | \
        xargs -0 sed -i 's:#!/usr/bin/with-contenv bash:#!/bin/bash:g'
  script:
    - |
      for file in $(grep -IRl "#\!\(/usr/bin/env \|/bin/\)" --exclude-dir \
        ".git" --exclude ".gitlab-ci.yml"); do
        if ! shellcheck $file; then
          export FAILED=1
        else
          echo "$file OK"
        fi
      done
      if [ "${FAILED}" = "1" ]; then
        exit 1
      fi

yamllint:
  <<: *preflight
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
  script:
    - yamllint .

jsonlint:
  <<: *preflight
  image: sahsu/docker-jsonlint
  before_script:
    - jsonlint --version || true
  script:
    - |
      for file in $(find . -type f -name "*.json"); do
        if ! jsonlint -q $file; then
          export FAILED=1
        else
          echo "$file OK"
        fi
      done
      if [ "${FAILED}" = "1" ]; then
        exit 1
      fi

markdownlint:
  <<: *preflight
  image:
    name: ruby:alpine
    entrypoint: [""]
  before_script:
    - gem install mdl
    - mdl --version
  script:
    - mdl --style all --warnings .

# Pages jobs
# pages:
#   stage: pages
#   image: alpine:3.8
#   script:
#     - rm -f ~/.gitconfig && rm -Rf  ~/.ssh
#     - apk add --no-cache git=2.18.0-r0 openssh-client=7.7_p1-r2 bash=4.4.19-r1
#     - eval $(ssh-agent -s)
#     - mkdir -p ~/.ssh
#     - echo "$GIT_SSH_PUB_KEY" > ~/.ssh/id_rsa.pub
#     - echo "$GIT_SSH_PRIV_KEY" | ssh-add -
#     - ssh-keyscan github.com >> ~/.ssh/known_hosts
#     - git config --global user.email "$GIT_EMAIL"
#     - git config --global user.name "Git"
#     - git clone $GITHUB_URL git-src/ && cd git-src/
#     - git status
#     - apk add --no-cache hugo=0.39-r0
#     - cd hugo/ && hugo -t hugo-material-docs && cd ../
#     - git add docs/
#     - 'git commit -m ":books: update docs"'
#     - git push origin master
#   only:
#     - master
#   tags:
#     - pages

# Build jobs
build:
  stage: build
  image: docker:stable-git
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - |
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo ""
      fi

      echo "Building Dockerfile-based application..."
      docker build -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA" .

      echo "Pushing to GitLab Container Registry..."
      docker push "$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
      echo ""
  only:
    - branches

# Test jobs
test:
  stage: test
  image: node:alpine
  script:
    - yarn install && yarn cache clean
    - mv config.json node_modules/
    - yarn run test
  only:
    - branches
  except:
    variables:
      - $TEST_DISABLED

code_quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - |
      docker run --env SOURCE_CODE="$PWD" \
                --volume "$PWD":/code \
                --volume /var/run/docker.sock:/var/run/docker.sock \
                "registry.gitlab.com/gitlab-org/security-products/codequality:$(echo "$CI_SERVER_VERSION" | \
                  sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  except:
    variables:
      - $CODE_QUALITY_DISABLED

dependency_scanning:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - |
      case "$CI_SERVER_VERSION" in
        *-ee)
          docker run --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" \
                    --volume "$PWD:/code" \
                    --volume /var/run/docker.sock:/var/run/docker.sock \
                    "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$(echo "$CI_SERVER_VERSION" | \
                      sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')" /code
          ;;
        *)
          echo "GitLab EE is required"
          ;;
      esac
  artifacts:
    paths: [gl-dependency-scanning-report.json]
  except:
    variables:
      - $DEPENDENCY_SCANNING_DISABLED

container_scanning:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - |
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to GitLab Container Registry with CI credentials..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo ""
      fi

      docker run -d --name db arminc/clair-db:latest
      docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
      apk add -U wget ca-certificates
      docker pull $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
      wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
      mv clair-scanner_linux_amd64 clair-scanner
      chmod +x clair-scanner
      touch clair-whitelist.yml
      retries=0
      echo "Waiting for clair daemon to start"
      while( ! wget -T 10 -q -O /dev/null http://docker:6060/v1/namespaces ) ; \
        do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; \
          retries=$(($retries+1)) ; done
      ./clair-scanner -c http://docker:6060 --ip $(hostname -i) -r gl-container-scanning-report.json \
        -l clair.log -w clair-whitelist.yml $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA || true
  artifacts:
    paths: [gl-container-scanning-report.json]
  except:
    variables:
      - $CONTAINER_SCANNING_DISABLED

# Deploy jobs
deploy: &deploy
  <<: *dind
  stage: deploy
  image: docker:latest
  before_script:
    - docker info
    - |
      docker pull \
        "registry.gitlab.com/${CI_PROJECT_PATH}/master:${CI_COMMIT_SHA}"
    - |
      echo "${CI_JOB_TOKEN}" | docker login \
        --username gitlab-ci-token \
        --password-stdin \
        registry.gitlab.com
    - |
      echo "${DOCKER_PASSWORD}" | docker login \
        --username "${DOCKER_LOGIN}" \
        --password-stdin
  script:
    - |
      docker tag \
        "registry.gitlab.com/${CI_PROJECT_PATH}/master:${CI_COMMIT_SHA}" \
        "registry.gitlab.com/${CI_PROJECT_PATH}/master:cache"
    - docker push "registry.gitlab.com/${CI_PROJECT_PATH}/master:cache"
    - TAG="${CI_COMMIT_TAG#v}"
    - TAG="${TAG:-${CI_COMMIT_SHA:0:7}}"
    - |
      docker tag \
        "registry.gitlab.com/${CI_PROJECT_PATH}/master:${CI_COMMIT_SHA}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}"
    - |
      docker push \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}"
    - |
      docker tag \
        "registry.gitlab.com/${CI_PROJECT_PATH}/master:${CI_COMMIT_SHA}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:latest"
    - |
      docker push \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:latest"
  tags:
    - deploy
  only:
    - tags
    - triggers
    - schedules
  except:
    - /^(?!master).+@/
