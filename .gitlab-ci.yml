---
image: alpine:latest

variables:
  IMAGE_SLUG: home-panel
  IMAGE_TARGET: .
  DOCKER_DRIVER: overlay2
  DOCKER_HUB_USER: timmo001

stages:
  - preflight
  - pages
  - prebuild
  - build
  - test
  - deploy
  - manifest

# Generic DIND template
.dind: &dind
  before_script:
    - docker info
  services:
    - name: docker:dind
      command: ["--experimental"]

# Generic preflight template
.preflight: &preflight
  stage: preflight
  tags:
    - preflight

# Prebuild jobs
build_app:
  stage: prebuild
  image: node:alpine
  script:
    - yarn install && yarn cache clean
    - yarn run build --production
  tags:
    - build
    - amd64
  artifacts:
    paths:
      - build/
    expire_in: 1 week

# Generic build template
.build: &build
  <<: *dind
  stage: build
  image: docker:stable
  dependencies:
    - build_app
  before_script:
    - docker info
    - |
      if [ "$(apk --print-arch)" = "amd64" ]; then
        docker run --rm --privileged hassioaddons/qemu-user-static:latest
      fi
    - |
      echo "${CI_JOB_TOKEN}" | docker login \
        --username gitlab-ci-token \
        --password-stdin \
        registry.gitlab.com
    - docker pull "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:cache" || true
  script:
    - |
      docker build \
        --build-arg "BUILD_FROM=${FROM}" \
        --build-arg "BUILD_DATE=$(date +"%Y-%m-%dT%H:%M:%SZ")" \
        --build-arg "BUILD_ARCH=${IMAGE_ARCH}" \
        --build-arg "BUILD_REF=${CI_COMMIT_SHA}" \
        --build-arg "BUILD_VERSION=${CI_COMMIT_TAG:-${CI_COMMIT_SHA:0:7}}" \
        --cache-from "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:cache" \
        --tag \
          "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}" \
        "${IMAGE_TARGET}"
    - |
      docker push \
        "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}"

# Generic scan template
.scan: &scan
  <<: *dind
  stage: test
  allow_failure: true
  image: docker:stable
  before_script:
    - docker info
    - docker run -d --name db arminc/clair-db:latest
    - docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
    - apk add -U curl ca-certificates
    - |
      curl \
        --silent \
        --show-error \
        --location \
        --fail \
        --retry 3 \
        --output /usr/bin/clair-scanner \
        https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - chmod +x /usr/bin/clair-scanner
    - touch clair-whitelist.yml
    - echo "Waiting for Clair to start"
    - |
      while ! nc -z docker 6060; do
        sleep 1
        WAIT=$((${WAIT} + 1))
        if [ "${WAIT}" -gt 30 ]; then
          echo "Error > Timeout waiting for Clair to start"
          exit 1
        fi
      done
    - docker pull "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}"
  script:
    - |
      clair-scanner \
        -c http://docker:6060 \
        --ip $(hostname -i) \
        -w clair-whitelist.yml \
        "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}"
  tags:
    - scan

# Generic deploy template
.deploy: &deploy
  <<: *dind
  stage: deploy
  before_script:
    - |
      echo "${CI_JOB_TOKEN}" | docker login \
        --username gitlab-ci-token \
        --password-stdin \
        registry.gitlab.com
    - |
      echo "${DOCKER_PASSWORD}" | docker login \
        --username "${DOCKER_LOGIN}" \
        --password-stdin
  script:
    - |
      docker tag \
        "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}" \
        "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:cache"
    - docker push "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:cache"
    - TAG="${CI_COMMIT_TAG#v}"
    - TAG="${TAG:-${CI_COMMIT_SHA:0:7}}"
    - |
      docker tag \
        "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${IMAGE_ARCH}-${TAG}"
    - |
      docker push \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${IMAGE_ARCH}-${TAG}"
    - |
      docker tag \
        "registry.gitlab.com/${CI_PROJECT_PATH}/${IMAGE_ARCH}:${CI_COMMIT_SHA}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}-${IMAGE_ARCH}:${TAG}"
    - |
      docker push \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}-${IMAGE_ARCH}:${TAG}"
  tags:
    - deploy
  only:
    - master
    - /^v\d+\.\d+\.\d+(?:-(?:beta|rc)(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?)?$/
  except:
    - /^(?!master).+@/

# Generic manifest template
.manifest: &manifest
  <<: *dind
  stage: manifest
  before_script:
    - mkdir -p ~/.docker
    - echo '{"experimental":"enabled"}' > ~/.docker/config.json
    - docker info
    - |
      echo "${DOCKER_PASSWORD}" | docker login \
        --username "${DOCKER_LOGIN}" \
        --password-stdin
  script:
    - TAG="${TAG#v}"
    - TAG="${TAG:-${CI_COMMIT_SHA:0:7}}"
    - REF="${CI_COMMIT_TAG#v}"
    - REF="${REF:-${CI_COMMIT_SHA:0:7}}"
    - |
      docker manifest create \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:aarch64-${REF}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:amd64-${REF}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:armhf-${REF}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:i386-${REF}"
    - |
      docker manifest annotate \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:aarch64-${REF}" \
        --os=linux \
        --arch=arm64 \
        --variant=v8
    - |
      docker manifest annotate \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:amd64-${REF}" \
        --os=linux \
        --arch=amd64
    - |
      docker manifest annotate \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:armhf-${REF}" \
        --os=linux \
        --arch=arm \
        --variant=v6
    - |
      docker manifest annotate \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}" \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:i386-${REF}" \
        --os=linux \
        --arch=386
    - |
      docker manifest push \
        "${DOCKER_HUB_USER}/${IMAGE_SLUG}:${TAG}"
  tags:
    - manifest
  except:
    - /^(?!master).+@/

# Preflight jobs
hadolint:
  <<: *preflight
  image: hadolint/hadolint:v1.6.6
  before_script:
    - hadolint --version
  script:
    - hadolint "Dockerfile"

shellcheck:
  <<: *preflight
  image:
    name: koalaman/shellcheck-alpine:stable
    entrypoint: [""]
  before_script:
    - shellcheck --version
    - apk --no-cache add grep
    - |
      find . -type f -print0 | \
        xargs -0 sed -i 's:#!/usr/bin/with-contenv bash:#!/bin/bash:g'
  script:
    - |
      for file in $(grep -IRl "#\!\(/usr/bin/env \|/bin/\)" --exclude-dir \
        ".git" --exclude ".gitlab-ci.yml"); do
        if ! shellcheck $file; then
          export FAILED=1
        else
          echo "$file OK"
        fi
      done
      if [ "${FAILED}" = "1" ]; then
        exit 1
      fi

yamllint:
  <<: *preflight
  image: sdesbure/yamllint
  before_script:
    - yamllint --version
  script:
    - yamllint .

jsonlint:
  <<: *preflight
  image: sahsu/docker-jsonlint
  before_script:
    - jsonlint --version || true
  script:
    - |
      for file in $(find . -type f -name "*.json"); do
        if ! jsonlint -q $file; then
          export FAILED=1
        else
          echo "$file OK"
        fi
      done
      if [ "${FAILED}" = "1" ]; then
        exit 1
      fi

markdownlint:
  <<: *preflight
  image:
    name: ruby:alpine
    entrypoint: [""]
  before_script:
    - gem install mdl
    - mdl --version
  script:
    - mdl -s mdl_style.rb --warnings .

# Pages jobs
mkdocs:
  stage: pages
  image: python:3.7.0-alpine3.8
  script:
    - rm -f ~/.gitconfig && rm -Rf  ~/.ssh
    - apk add --no-cache git=2.18.0-r0 git-fast-import=2.18.0-r0 openssh-client=7.7_p1-r3 bash=4.4.19-r1
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$GIT_SSH_PUB_KEY" > ~/.ssh/id_rsa.pub
    - echo "$GIT_SSH_PRIV_KEY" | ssh-add -
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - git config --global user.email "$GIT_EMAIL"
    - git config --global user.name "Git"
    - git clone $GITHUB_URL git-src/ && cd git-src/
    - git status
    - cd docs
    - python --version
    - pip --version
    - pip install mkdocs mkdocs-material
    - 'mkdocs gh-deploy -v -c -m ":books: update docs"'
  only:
    - master
  tags:
    - pages

# Build Jobs
build:armhf:
  <<: *build
  variables:
    IMAGE_ARCH: armhf
    FROM: arm32v6/alpine:3.8
  tags:
    - build
    - armhf

build:aarch64:
  <<: *build
  variables:
    IMAGE_ARCH: aarch64
    FROM: arm64v8/alpine:3.8
  tags:
    - build
    - aarch64

build:i386:
  <<: *build
  variables:
    IMAGE_ARCH: i386
    FROM: i386/alpine:3.8
  tags:
    - build
    - i386

build:amd64:
  <<: *build
  variables:
    IMAGE_ARCH: amd64
    FROM: amd64/alpine:3.8
  tags:
    - build
    - amd64

# Scan jobs
clair:armhf:
  <<: *scan
  variables:
    IMAGE_ARCH: armhf

clair:aarch64:
  <<: *scan
  variables:
    IMAGE_ARCH: aarch64

clair:i386:
  <<: *scan
  variables:
    IMAGE_ARCH: i386

clair:amd64:
  <<: *scan
  variables:
    IMAGE_ARCH: amd64

# Test jobs
test:
  stage: test
  image: node:alpine
  script:
    - yarn install && yarn cache clean
    - yarn run test
  only:
    - branches
  except:
    variables:
      - $TEST_DISABLED

code_quality:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - |
      docker run --env SOURCE_CODE="$PWD" \
                --volume "$PWD":/code \
                --volume /var/run/docker.sock:/var/run/docker.sock \
                "registry.gitlab.com/gitlab-org/security-products/codequality:$(echo "$CI_SERVER_VERSION" | \
                  sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')" /code
  artifacts:
    paths: [gl-code-quality-report.json]
  except:
    - tags

dep_scan:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - |
      case "$CI_SERVER_VERSION" in
        *-ee)
          docker run --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" \
                    --volume "$PWD:/code" \
                    --volume /var/run/docker.sock:/var/run/docker.sock \
                    "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$(echo "$CI_SERVER_VERSION" | \
                      sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')" /code
          ;;
        *)
          echo "GitLab EE is required"
          ;;
      esac
  artifacts:
    paths: [gl-dependency-scanning-report.json]
  except:
    - tags

# Deploy jobs
release_file:
  stage: deploy
  image: node:alpine
  script:
    - apk --no-cache add curl zip jq
    - yarn install && yarn cache clean
    - yarn build --production
    - zip -r home-panel-built.zip build
    - |
      curl \
        -H "Authorization: token ${GITHUB_TOKEN}" -H \
        -H "Accept: application/vnd.github.manifold-preview" \
        -H "Content-Type: application/zip" \
        --data-binary @home-panel-built.zip "https://uploads.github.com/repos/timmo001/home-panel/releases/$(curl https://api.github.com/repos/timmo001/home-panel/releases/latest | jq '.id')/assets?name=home-panel-built.zip"
  tags:
    - deploy
  only:
    - tags
    - triggers
    - schedules
  except:
    - /^(?!master).+@/

deploy:armhf:
  <<: *deploy
  variables:
    IMAGE_ARCH: armhf

deploy:aarch64:
  <<: *deploy
  variables:
    IMAGE_ARCH: aarch64

deploy:i386:
  <<: *deploy
  variables:
    IMAGE_ARCH: i386

deploy:amd64:
  <<: *deploy
  variables:
    IMAGE_ARCH: amd64

# Manifest jobs
manifest:sha:
  <<: *manifest
  only:
    - master

manifest:version:
  <<: *manifest
  variables:
    TAG: "${CI_COMMIT_TAG}"
  only:
    - /^v\d+\.\d+\.\d+(?:-(?:beta|rc)(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?)?$/

manifest:stable:
  <<: *manifest
  variables:
    TAG: latest
  only:
    - /^v\d+\.\d+\.\d+(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?$/

manifest:beta:
  <<: *manifest
  variables:
    TAG: beta
  only:
    - /^v\d+\.\d+\.\d+(?:-(?:beta|rc)(?:(?:(?:\+|\.)?[a-zA-Z0-9]+)*)?)?$/

manifest:edge:
  <<: *manifest
  variables:
    TAG: edge
  only:
    - master
