---
trigger:
  batch: true
  branches:
    include:
      - 'refs/tags/*'

pr: 'none'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: 'yarnCachePath'
    value: '$(Pipeline.Workspace)/.yarn/cache'
  - group: 'github'
  - name: 'githubRepository'
    value: 'timmo001/home-panel'
  - group: 'docker'
  - name: 'dockerSlug'
    value: 'home-panel'
  - name: 'dockerTarget'
    value: '.'
  - name: 'amd64Base'
    value: 'amd64/alpine:latest'
  - name: 'arm32v6Base'
    value: 'arm32v6/alpine:latest'
  - name: 'arm32v7Base'
    value: 'arm32v7/alpine:latest'
  - name: 'arm64v8Base'
    value: 'arm64v8/alpine:latest'

resources:
  repositories:
    - repository: 'organization'
      type: 'github'
      name: 'timmo001/organization'
      endpoint: 'timmo001'

stages:
  - stage: 'Lint'
    dependsOn: []
    jobs:
      # - template: azure-ci/lint/eslint.yml@organization
      - template: azure-ci/lint/hadolint.yml@organization
      - template: azure-ci/lint/jsonlint.yml@organization
      - template: azure-ci/lint/markdownlint.yml@organization
      - template: azure-ci/lint/prettier.yml@organization
      - template: azure-ci/lint/shellcheck.yml@organization
      - template: azure-ci/lint/yamllint.yml@organization
  - stage: 'Build'
    dependsOn: []
    jobs:
      - template: azure-ci/build/react-app.yml@organization
      - template: azure-ci/build/node-ts.yml@organization
  - stage: 'Docker'
    dependsOn:
      - 'Lint'
      - 'Build'
    condition: succeeded()
    jobs:
      - job: 'Docker_Build'
        displayName: 'Build'
        strategy:
          maxParallel: 4
          matrix:
            amd64:
              buildArch: 'amd64'
              buildBase: $(amd64Base)
            arm32v6:
              buildArch: 'arm32v6'
              buildBase: $(arm32v6Base)
            arm32v7:
              buildArch: 'arm32v7'
              buildBase: $(arm32v7Base)
            arm64v8:
              buildArch: 'arm64v8'
              buildBase: $(arm64v8Base)
        steps:
          - template: azure-ci/setup/node.yml@organization
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Frontend Artifacts'
            inputs:
              artifactName: 'frontend-build'
              downloadPath: $(System.DefaultWorkingDirectory)/frontend/build
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Backend Artifacts'
            inputs:
              artifactName: 'backend'
              downloadPath: $(System.DefaultWorkingDirectory)/backend
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerHub'
              command: 'login'
            displayName: 'Login'
          - script: |
              sudo sh -c 'echo "{ \"experimental\": true }" > /etc/docker/daemon.json'
              sudo systemctl restart docker.service
              mkdir -p ~/.docker
              echo '{"experimental":"enabled"}' > ~/.docker/config.json
            displayName: 'Enable Experimental'
          - template: azure-ci/docker/qemu-build.yml@organization
            parameters:
              buildArch: '$(buildArch)'
              buildBase: '$(buildBase)'
              dockerOrg: '$(dockerLogin)'
              dockerSlug: '$(dockerSlug)'
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-beta"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-beta" \
                "$(dockerLogin)/$(dockerSlug):beta"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-beta"
            condition: contains(variables['Build.SourceBranchName'], 'beta')
            displayName: 'Publish Beta'
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-latest"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-latest" \
                "$(dockerLogin)/$(dockerSlug):latest"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-latest"
            condition: not(contains(variables['Build.SourceBranchName'], 'beta'))
            displayName: 'Publish Latest'
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceBranchName)"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceBranchName)" \
                "$(dockerLogin)/$(dockerSlug):$(Build.SourceBranchName)"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceBranchName)"
            displayName: 'Publish Version'
      - job: 'Docker_Manifest_Version'
        displayName: 'Manifest Version'
        dependsOn:
          - 'Docker_Build_Publish'
        condition: succeeded()
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerHub'
              command: 'login'
            displayName: 'Login'
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: '$(Build.SourceBranchName)'
              dockerOrg: '$(dockerLogin)'
              dockerSlug: '$(dockerSlug)'
              name: 'Version'
      - job: 'Docker_Manifest_Beta'
        displayName: 'Manifest Beta'
        dependsOn:
          - 'Docker_Build_Publish'
        condition: and(succeeded(), contains(variables['Build.SourceBranchName'], 'beta'))
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerHub'
              command: 'login'
            displayName: 'Login'
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: 'beta'
              dockerOrg: '$(dockerLogin)'
              dockerSlug: '$(dockerSlug)'
              name: 'Beta'
      - job: 'Docker_Manifest_Stable'
        displayName: 'Manifest Stable'
        dependsOn:
          - 'Docker_Build_Publish'
        condition: and(succeeded(), not(contains(variables['Build.SourceBranchName'], 'beta')))
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'dockerHub'
              command: 'login'
            displayName: 'Login'
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: 'latest'
              dockerOrg: '$(dockerLogin)'
              dockerSlug: '$(dockerSlug)'
              name: 'Latest'
  - stage: 'Publish_Artifacts'
    displayName: 'Publish Artifacts'
    dependsOn:
      - 'Build'
    condition: succeeded()
    jobs:
      - job: 'Publish_Artifacts_Frontend'
        displayName: 'Frontend'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Frontend Artifacts'
            inputs:
              artifactName: 'frontend-build'
              downloadPath: $(System.DefaultWorkingDirectory)/frontend/build
          - script: |
              zip -r $(dockerSlug)-frontend.zip frontend/build
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/zip" \
                --data-binary @$(dockerSlug)-frontend.zip "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-frontend.zip"
              tar -czf $(dockerSlug)-frontend.tar.gz frontend/build
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/tar+gzip" \
                --data-binary @$(dockerSlug)-frontend.tar.gz "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-frontend.tar.gz"
            displayName: 'Publish'
      - job: 'Publish_Artifacts_Backend'
        displayName: 'Backend'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Backend Artifacts'
            inputs:
              artifactName: 'backend'
              downloadPath: $(System.DefaultWorkingDirectory)/backend
          - script: |
              zip -r $(dockerSlug)-backend.zip backend
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/zip" \
                --data-binary @$(dockerSlug)-backend.zip "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-backend.zip"
              tar -czf $(dockerSlug)-backend.tar.gz backend
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/tar+gzip" \
                --data-binary @$(dockerSlug)-backend.tar.gz "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://backend.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-backend.tar.gz"
            displayName: 'Publish'
