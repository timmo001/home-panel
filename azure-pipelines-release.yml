---
trigger:
  batch: true
  branches:
    include:
      - "refs/tags/*"

pr: "none"

pool:
  vmImage: "ubuntu-latest"

variables:
  - name: "yarnCachePath"
    value: "$(Pipeline.Workspace)/.yarn"
  - group: "github"
  - name: "githubRepository"
    value: "timmo001/home-panel"
  - group: "docker"
  - name: "dockerSlug"
    value: "home-panel"
  - name: "dockerTarget"
    value: "."
  - name: "amd64Base"
    value: "amd64/alpine:3.11.3"
  - name: "arm32v6Base"
    value: "arm32v6/alpine:3.11.3"
  - name: "arm32v7Base"
    value: "arm32v7/alpine:3.11.3"
  - name: "arm64v8Base"
    value: "arm64v8/alpine:3.11.3"

resources:
  repositories:
    - repository: "organization"
      type: "github"
      name: "timmo001/organization"
      endpoint: "timmo001"

stages:
  - stage: "Build"
    dependsOn: []
    jobs:
      - template: azure-ci/build/react-app.yml@organization
      - template: azure-ci/build/node-ts.yml@organization
  - stage: "Docker"
    dependsOn:
      - "Build"
    condition: succeeded()
    jobs:
      - job: "Docker_Build_Publish"
        displayName: "Build and Publish"
        strategy:
          maxParallel: 4
          matrix:
            amd64:
              buildArch: "amd64"
              buildBase: $(amd64Base)
            arm32v6:
              buildArch: "arm32v6"
              buildBase: $(arm32v6Base)
            arm32v7:
              buildArch: "arm32v7"
              buildBase: $(arm32v7Base)
            arm64v8:
              buildArch: "arm64v8"
              buildBase: $(arm64v8Base)
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download App Artifacts"
            inputs:
              artifactName: "build"
              downloadPath: $(System.DefaultWorkingDirectory)
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifacts"
            inputs:
              artifactName: "lib"
              downloadPath: $(System.DefaultWorkingDirectory)/api
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
          - script: |
              sudo sh -c 'echo "{ \"experimental\": true }" > /etc/docker/daemon.json'
              sudo systemctl restart docker.service
              mkdir -p ~/.docker
              echo '{"experimental":"enabled"}' > ~/.docker/config.json
            displayName: "Enable Experimental"
          - template: azure-ci/docker/qemu-build.yml@organization
            parameters:
              buildArch: "$(buildArch)"
              buildBase: "$(buildBase)"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-beta"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-beta" \
                "$(dockerLogin)/$(dockerSlug):beta"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-beta"
            condition: contains(variables['Build.SourceBranchName'], 'beta')
            displayName: "Publish Beta"
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-latest"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-latest" \
                "$(dockerLogin)/$(dockerSlug):latest"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-latest"
            condition: not(contains(variables['Build.SourceBranchName'], 'beta'))
            displayName: "Publish Latest"
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceBranchName)"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceBranchName)" \
                "$(dockerLogin)/$(dockerSlug):$(Build.SourceBranchName)"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceBranchName)"
            displayName: "Publish Version"
      - job: "Docker_Manifest_Version"
        displayName: "Manifest Version"
        dependsOn:
          - "Docker_Build_Publish"
        condition: succeeded()
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: "$(Build.SourceBranchName)"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
              name: "Version"
      - job: "Docker_Manifest_Beta"
        displayName: "Manifest Beta"
        dependsOn:
          - "Docker_Build_Publish"
        condition: and(succeeded(), contains(variables['Build.SourceBranchName'], 'beta'))
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: "beta"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
              name: "Beta"
      - job: "Docker_Manifest_Stable"
        displayName: "Manifest Stable"
        dependsOn:
          - "Docker_Build_Publish"
        condition: and(succeeded(), not(contains(variables['Build.SourceBranchName'], 'beta')))
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: "latest"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
              name: "Latest"
  - stage: "Publish_Artifacts"
    displayName: "Publish Artifacts"
    dependsOn:
      - "Build"
    condition: succeeded()
    jobs:
      - job: "Publish_Artifacts_App"
        displayName: "App"
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download App Artifacts"
            inputs:
              artifactName: "app"
              downloadPath: $(System.DefaultWorkingDirectory)/build
          - script: |
              zip -r $(dockerSlug)-built.zip build
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/zip" \
                --data-binary @$(dockerSlug)-built.zip "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-built.zip"
              tar -czf $(dockerSlug)-built.tar.gz build
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/tar+gzip" \
                --data-binary @$(dockerSlug)-built.tar.gz "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-built.tar.gz"
            displayName: "Publish"
      - job: "Publish_Artifacts_Api"
        displayName: "Api"
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifacts"
            inputs:
              artifactName: "api"
              downloadPath: $(System.DefaultWorkingDirectory)/api/lib
          - script: |
              zip -r $(dockerSlug)-api.zip api/lib
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/zip" \
                --data-binary @$(dockerSlug)-api.zip "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-api.zip"
              tar -czf $(dockerSlug)-api.tar.gz api/lib
              curl \
                -H "Authorization: token $(githubToken)" -H \
                -H "Accept: application/vnd.github.manifold-preview" \
                -H "Content-Type: application/tar+gzip" \
                --data-binary @$(dockerSlug)-api.tar.gz "https://uploads.github.com/repos/$(githubRepository)/releases/$(curl https://api.github.com/repos/$(githubRepository)/releases | jq '.[0].id')/assets?name=$(dockerSlug)-api.tar.gz"
            displayName: "Publish"
