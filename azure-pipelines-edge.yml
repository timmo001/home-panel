---
trigger:
  batch: true
  branches:
    include:
      - "master"

pr: "none"

pool:
  vmImage: "ubuntu-latest"

variables:
  - name: "yarnCachePath"
    value: "$(Pipeline.Workspace)/.yarn"
  - group: "github"
  - name: "githubRepository"
    value: "timmo001/home-panel"
  - group: "docker"
  - name: "dockerSlug"
    value: "home-panel"
  - name: "dockerTarget"
    value: "."
  - name: "amd64Base"
    value: "amd64/alpine:3.11.3"
  - name: "arm32v6Base"
    value: "arm32v6/alpine:3.11.3"
  - name: "arm32v7Base"
    value: "arm32v7/alpine:3.11.3"
  - name: "arm64v8Base"
    value: "arm64v8/alpine:3.11.3"

resources:
  repositories:
    - repository: "organization"
      type: "github"
      name: "timmo001/organization"
      endpoint: "timmo001"

stages:
  - stage: "Lint"
    dependsOn: []
    jobs:
      # - template: azure-ci/lint/eslint.yml@organization
      #   parameters:
      #     path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/hadolint.yml@organization
        parameters:
          path: "Dockerfile"
      - template: azure-ci/lint/jsonlint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/markdownlint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/prettier.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/shellcheck.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
      - template: azure-ci/lint/yamllint.yml@organization
        parameters:
          path: $(System.DefaultWorkingDirectory)
  - stage: "Build"
    dependsOn: []
    jobs:
      - template: azure-ci/build/react-app.yml@organization
      - template: azure-ci/build/node-ts.yml@organization
  - stage: "Docker"
    dependsOn:
      - "Lint"
      - "Build"
    condition: succeeded()
    jobs:
      - job: "Docker_Build_Publish"
        displayName: "Build and Publish"
        strategy:
          maxParallel: 4
          matrix:
            amd64:
              buildArch: "amd64"
              buildBase: $(amd64Base)
            arm32v6:
              buildArch: "arm32v6"
              buildBase: $(arm32v6Base)
            arm32v7:
              buildArch: "arm32v7"
              buildBase: $(arm32v7Base)
            arm64v8:
              buildArch: "arm64v8"
              buildBase: $(arm64v8Base)
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: "Download App Artifacts"
            inputs:
              artifactName: "build"
              downloadPath: $(System.DefaultWorkingDirectory)
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifacts"
            inputs:
              artifactName: "lib"
              downloadPath: $(System.DefaultWorkingDirectory)/api
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
          - script: |
              sudo sh -c 'echo "{ \"experimental\": true }" > /etc/docker/daemon.json'
              sudo systemctl restart docker.service
              mkdir -p ~/.docker
              echo '{"experimental":"enabled"}' > ~/.docker/config.json
            displayName: "Enable Experimental"
          - template: azure-ci/docker/qemu-build.yml@organization
            parameters:
              buildArch: "$(buildArch)"
              buildBase: "$(buildBase)"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(Build.SourceVersion)"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)"
            displayName: "Publish Sha"
          - script: |
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-$(Build.SourceVersion)" \
                "$(dockerLogin)/$(dockerSlug):$(buildArch)-edge"
              docker tag "$(dockerLogin)/$(dockerSlug):$(buildArch)-edge" \
                "$(dockerLogin)/$(dockerSlug):edge"
              docker push "$(dockerLogin)/$(dockerSlug):$(buildArch)-edge"
            displayName: "Publish Edge"
      - job: "Docker_Manifest"
        displayName: "Manifest"
        dependsOn:
          - "Docker_Build_Publish"
        condition: succeeded()
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: "dockerHub"
              command: "login"
            displayName: "Login"
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: "$(Build.SourceVersion)"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
              name: "Sha"
          - template: azure-ci/docker/qemu-manifest.yml@organization
            parameters:
              buildId: "edge"
              dockerOrg: "$(dockerLogin)"
              dockerSlug: "$(dockerSlug)"
              name: "Edge"
