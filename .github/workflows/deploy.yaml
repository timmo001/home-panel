---
name: Deploy

# yamllint disable-line rule:truthy
on:
  release:
    types:
      - published
  workflow_run:
    workflows: ["CI"]
    branches: [master]
    types:
      - completed

jobs:
  information:
    if: |
      github.event_name == 'release'
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    name: ‚ÑπÔ∏è Gather container information
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.release.outputs.environment }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: ‚ÑπÔ∏è Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi

          echo "::set-output name=environment::${environment}"
          echo "::set-output name=version::${version}"
  deploy:
    name: üë∑ Build & Deploy ${{ matrix.architecture }}
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          - aarch64
          - amd64
          - armhf
          - armv7
          - i386
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: üèó Set up build cache
        id: cache
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.ref }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ github.ref }}-${{ matrix.architecture }}
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v1.0.1
      - name: üèó Set up QEMU User Static for aarch64
        if: ${{ matrix.architecture == 'aarch64' }}
        run: |
          curl -L -s \
            "https://github.com/hassio-addons/qemu-user-static/releases/download/v5.0.0/qemu-aarch64-static.tar.gz" | \
            tar zxvf - -C "./rootfs/usr/bin/"
      - name: üèó Set up QEMU User Static for armhf/armv7
        if: ${{ matrix.architecture == 'armhf' || matrix.architecture == 'armv7' }}
        run: |
          curl -L -s \
            "https://github.com/hassio-addons/qemu-user-static/releases/download/v5.0.0/qemu-arm-static.tar.gz" | \
            tar zxvf - -C "./rootfs/usr/bin/"
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.1.1
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(jq --raw-output ".build_from.${{ matrix.architecture }}" "build.json")
          echo "::set-output name=from::${from}"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "::set-output name=platform::linux/386"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "::set-output name=platform::linux/arm/v6"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "::set-output name=platform::linux/arm/v7"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "::set-output name=platform::linux/arm64/v8"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: üèó  Login to GitHub Container Registry
        uses: docker/login-action@v1.8.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}
      - name: üöÄ Build and push
        uses: docker/build-push-action@v2.3.0
        with:
          push: true
          # yamllint disable rule:line-length
          tags: |
            ghcr.io/timmo001/home-panel/${{ matrix.architecture }}:${{ needs.information.outputs.environment }}
            ghcr.io/timmo001/home-panel/${{ matrix.architecture }}:${{ needs.information.outputs.version }}
          # yamllint enable rule:line-length
          context: .
          file: ./Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/timmo001/home-panel/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
