name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out files from GitHub
        uses: actions/checkout@v2
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Fetch Yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Install packages
        run: |
          sudo apt install -y jsonlint
      - name: ESLint
        run: yarn eslint
      - name: Hadolint
        uses: brpaz/hadolint-action@v1.1.0
        with:
          dockerfile: Dockerfile
      - name: JSONLint
        run: |
          for file in $(find ./ -type f -name "*.json"); do
            if ! jsonlint-php -q $file; then
              export FAILED=1
            else
              echo "$file OK"
            fi
          done
          if [ "${FAILED}" = "1" ]; then
            exit 1
          fi
      - name: Markdown Link Checks
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.7
        with:
          use-quiet-mode: no
          use-verbose-mode: no
          config-file: mlc_config.json
          folder-path: documentation, backend, frontend, rootfs, .github
          file-path: './README.md, ./LICENSE.md'
          max-depth: -1
          check-modified-files-only: no
          base-branch: master
          file-extension: .md
      - name: Prettier Check ts*
        uses: creyD/prettier_action@v3.0
        with:
          file_pattern: ./**/*.ts*
          prettier_options: --check
          dry: yes
      - name: Prettier Check js*
        uses: creyD/prettier_action@v3.0
        with:
          file_pattern: ./**/*.js*
          prettier_options: --check
          dry: yes
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@0.5.0
        with:
          ignore: |
            .vscode
            .yarn
          check_together: yes
      - name: YAMLLint
        uses: ibiqlik/action-yamllint@v1.0.0
        with:
          file_or_dir: .
          config_file: .yamllint
          format: colored
          strict: false
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out files from GitHub
        uses: actions/checkout@v2
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Fetch Yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Test Backend
        run: yarn test
        env:
          CI: true
        working-directory: backend
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out files from GitHub
        uses: actions/checkout@v2
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Fetch Yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Compile Backend
        run: yarn compile
        env:
          CI: true
          NODE_ENV: 'production'
        working-directory: backend
      - name: Build Frontend
        run: yarn build
        env:
          CI: true
          NODE_ENV: 'production'
        working-directory: frontend
