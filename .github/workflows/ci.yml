name: CI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  lint-eslint:
    name: 👕 ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🏗 Set up Node.js
        uses: actions/setup-node@v3.1.0
        with:
          node-version: 14.x
      - name: ⤵️ Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: ⤵️ Fetch Yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: ⤵️ Install dependencies
        run: yarn install:all
        env:
          CI: true
      - name: 🚀 Run ESLint
        run: yarn eslint
  lint-hadolint:
    name: 👕 Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile
  lint-jsonlint:
    name: 👕 JSONLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🚀 Run JSONLint
        run: |
          sudo apt install -y jsonlint
          for file in $(find ./ -type f -name "*.json"); do
            if ! jsonlint-php -q $file; then
              export FAILED=1
            else
              echo "$file OK"
            fi
          done
          if [ "${FAILED}" = "1" ]; then
            exit 1
          fi
  lint-markdownlint:
    name: 👕 MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🚀 Run mdl
        uses: actionshub/markdownlint@2.0.2
  lint-markdown-links:
    name: 👕 Markdown Link Check
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🚀 Run Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.14
        with:
          use-quiet-mode: no
          use-verbose-mode: no
          config-file: mlc_config.json
          folder-path: documentation, backend, frontend, rootfs, .github
          file-path: "./README.md, ./LICENSE.md"
          max-depth: -1
          check-modified-files-only: no
          base-branch: master
          file-extension: .md
  lint-prettier:
    name: 👕 Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run Prettier
        uses: creyD/prettier_action@v4.2
        with:
          prettier_options: --write **/*.{js,json,ts,tsx,yml,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  lint-shellcheck:
    name: 👕 ShellCheck
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: ✏ Setup
        run: |
          find . -type f -print0 | xargs -0 sed -i 's:#!/usr/bin/with-contenv bash:#!/bin/bash:g'
      - name: 🚀 Run ShellCheck
        uses: ludeeus/action-shellcheck@1.1.0
        env:
          SHELLCHECK_OPTS: -s bash
        with:
          ignore: .devcontainer .vscode .yarn
          check_together: yes
  lint-yamllint:
    name: 👕 YAMLLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🚀 Run YAMLLint
        uses: ibiqlik/action-yamllint@v3.1
        with:
          file_or_dir: .
          config_file: .yamllint.yml
          format: colored
          strict: false
          # tests:
          #   name: 🧪 Tests
          #   runs-on: ubuntu-latest
          #   steps:
          #     - name: ⤵️ Check out code from GitHub
          #       uses: actions/checkout@v3
          #     - name: 🏗 Set up Node.js
          #       uses: actions/setup-node@v3.1.0
          #       with:
          #         node-version: 14.x
          #     - name: ⤵️ Get yarn cache path
          #       id: yarn-cache-dir-path
          #       run: echo "::set-output name=dir::$(yarn cache dir)"
          #     - name: ⤵️ Fetch Yarn cache
          #       uses: actions/cache@v3
          #       with:
          #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          #         restore-keys: |
          #           ${{ runner.os }}-yarn-
          #     - name: ⤵️ Install dependencies
          #       run: yarn install:all
          #       env:
          #         CI: true
          #     - name: 🧪 Backend - Test
          #       run: yarn test
          #       env:
          #         CI: true
          #       working-directory: backend
          #     - name: 🧪 Frontend - Test
          #       run: yarn test
          #       env:
          #         CI: true
          #       working-directory: frontend
  build-app:
    name: 🚀 Build Application
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: 🏗 Set up Node.js
        uses: actions/setup-node@v3.1.0
        with:
          node-version: 16.x
          cache: yarn
      - name: ⤵️ Install dependencies
        run: yarn install:all
        env:
          CI: true
      - name: 🚀 Backend - Compile
        run: yarn compile
        env:
          CI: true
          NODE_ENV: "production"
        working-directory: backend
      - name: ⬆ Backend - Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: backend-lib
          path: backend/lib
      - name: 🚀 Frontend - Build
        run: yarn build
        env:
          CI: true
          NODE_ENV: "production"
          INLINE_RUNTIME_CHUNK: false
        working-directory: frontend
      - name: ⬆ Frontend - Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: frontend/build
  build-container:
    name: 🚀 Build Container - ${{ matrix.architecture }}
    needs:
      - build-app
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          - aarch64
          - amd64
          - armhf
          - armv7
          - i386
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v3
      - name: ⤵️ Backend - Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: backend-lib
          path: backend/lib
      - name: ⤵️ Frontend - Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: frontend-build
          path: frontend/build
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.ref }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ github.ref }}-${{ matrix.architecture }}
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(jq --raw-output ".build_from.${{ matrix.architecture }}" "build.json")
          echo "::set-output name=from::${from}"
          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "::set-output name=platform::linux/386"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "::set-output name=platform::linux/arm/v6"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "::set-output name=platform::linux/arm/v7"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "::set-output name=platform::linux/arm64/v8"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: 🚀 Build
        uses: docker/build-push-action@v2.10.0
        with:
          push: false
          context: .
          file: Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/timmo001/home-panel/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=edge
