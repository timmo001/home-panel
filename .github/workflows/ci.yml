name: CI

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

jobs:
  lint-hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: Hadolint
        uses: brpaz/hadolint-action@v1.3.1
        with:
          dockerfile: Dockerfile
  lint-json:
    name: JSONLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: üöÄ Run JSONLint
        run: |
          sudo apt install -y jsonlint
          for file in $(find ./ -type f -name "*.json"); do
            if ! jsonlint-php -q $file; then
              export FAILED=1
            else
              echo "$file OK"
            fi
          done
          if [ "${FAILED}" = "1" ]; then
            exit 1
          fi
  lint-markdown:
    name: MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: üöÄ Run mdl
        uses: actionshub/markdownlint@2.0.2
  lint-markdown-links:
    name: Markdown Links
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: üöÄ Run Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
        with:
          use-quiet-mode: no
          use-verbose-mode: no
          config-file: mlc_config.json
          folder-path: documentation, backend, frontend, rootfs, .github
          file-path: "./README.md, ./LICENSE.md"
          max-depth: -1
          check-modified-files-only: no
          base-branch: master
          file-extension: .md
  lint-shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: ‚úè Setup
        run: |
          find . -type f -print0 | xargs -0 sed -i 's:#!/usr/bin/with-contenv bash:#!/bin/bash:g'
      - name: üöÄ Run ShellCheck
        uses: ludeeus/action-shellcheck@1.0.0
        env:
          SHELLCHECK_OPTS: -s bash
        with:
          ignore: .devcontainer .vscode .yarn
          check_together: yes
  lint-yaml:
    name: YAMLLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: üöÄ Run YAMLLint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_file: .yamllint.yml
          format: colored
          strict: false
  lint-eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: ‚§µÔ∏è Set up Node.js
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
      - name: ‚§µÔ∏è Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: ‚§µÔ∏è Fetch Yarn cache
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: ‚§µÔ∏è Install dependencies
        run: yarn install
        env:
          CI: true
      - name: üöÄ Run ESLint
        run: yarn eslint
  lint-prettier:
    name: Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: üöÄ Run Prettier
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: --write **/*.{js,json,md,ts,tsx,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: ‚§µÔ∏è Set up Node.js
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
      - name: ‚§µÔ∏è Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: ‚§µÔ∏è Fetch Yarn cache
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: ‚§µÔ∏è Install dependencies
        run: yarn install
        env:
          CI: true
      - name: üß™ Backend - Test
        run: yarn test
        env:
          CI: true
        working-directory: backend
      - name: üß™ Frontend - Test
        run: yarn test
        env:
          CI: true
        working-directory: frontend
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: ‚§µÔ∏è Set up Node.js
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x
      - name: ‚§µÔ∏è Get yarn cache path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: ‚§µÔ∏è Fetch Yarn cache
        uses: actions/cache@v2.1.4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: ‚§µÔ∏è Install dependencies
        run: yarn install
        env:
          CI: true
      - name: üöÄ Backend - Compile
        run: yarn compile
        env:
          CI: true
          NODE_ENV: "production"
        working-directory: backend
      - name: ‚¨Ü Backend - Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: backend-lib
          path: backend/lib/
      - name: üöÄ Frontend - Build
        run: yarn build
        env:
          CI: true
          NODE_ENV: "production"
          INLINE_RUNTIME_CHUNK: false
        working-directory: frontend
      - name: ‚¨Ü Frontend - Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: frontend/build/
